#!/bin/bash
######################################################################
# Wazuh Admin Password Manager & Internal User Reload Tool
#
# Usage:
#   source script.sh set       - Backs up and sets a new admin hash, then applies it
#   source script.sh restore   - Restores the backed-up admin hash, then applies it
#   ./script.sh                - Reloads internal_users.yml and restarts services
######################################################################

adminpem="/etc/wazuh-indexer/certs/admin.pem"
adminkey="/etc/wazuh-indexer/certs/admin-key.pem"
capem="/etc/wazuh-indexer/certs/root-ca.pem"
logfile="/var/log/wazuh-passwords-tool.log"
debug=">> ${logfile} 2>&1"

file="/etc/wazuh-indexer/opensearch-security/internal_users.yml"
backup="/tmp/back.txt"
IP="10.10.1.4"

# Logging function
function common_logger() {
    now=$(date +'%d/%m/%Y %H:%M:%S')
    mtype="INFO:"
    debugLogger=
    nolog=
    if [ -n "${1}" ]; then
        while [ -n "${1}" ]; do
            case ${1} in
                "-e") mtype="ERROR:"; shift ;;
                "-w") mtype="WARNING:"; shift ;;
                "-d") debugLogger=1; mtype="DEBUG:"; shift ;;
                "-nl") nolog=1; shift ;;
                *) message="${1}"; shift ;;
            esac
        done
    fi

    if [ -z "${debugLogger}" ] || { [ -n "${debugLogger}" ] && [ -n "${debugEnabled}" ]; }; then
        if [ "$EUID" -eq 0 ] && [ -z "${nolog}" ]; then
            printf "%s\n" "${now} ${mtype} ${message}" | tee -a ${logfile}
        else
            printf "%b\n" "${now} ${mtype} ${message}"
        fi
    fi
}

# Run securityadmin.sh to apply changes
function passwords_runSecurityAdmin() {
    common_logger -d "Applying updated internal_users.yml to Wazuh."
    eval "JAVA_HOME=/usr/share/wazuh-indexer/jdk/ OPENSEARCH_CONF_DIR=/etc/wazuh-indexer /usr/share/wazuh-indexer/plugins/opensearch-security/tools/securityadmin.sh -f ${file} -t internalusers -p 9200 -nhnv -cacert ${capem} -cert ${adminpem} -key ${adminkey} -icl -h ${IP} ${debug}"
    if [ "${PIPESTATUS[0]}" != 0 ]; then
        common_logger -e "Failed to apply changes via securityadmin.sh"
        return 1
    fi
    common_logger -d "Changes applied successfully."
}

# Main for reload mode (executed script)
function main() {
    umask 177
    if [ $# -eq 0 ]; then
        passwords_runSecurityAdmin
        systemctl restart wazuh-indexer wazuh-manager.service wazuh-dashboard.service
        exit 0
    fi
}

# Hash management (source-only)
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    if [ ! -f "$file" ]; then
        common_logger -e "File $file not found!"
        return 1
    fi

    if [ -z "$1" ]; then
        common_logger -e "Usage: source $0 [set|restore]"
        return 1
    fi

    case "$1" in
        set)
            awk '/^admin:/ {flag=1; next} /^[^ ]/ {flag=0} flag && /hash:/ {print $2}' "$file" > "$backup"
            if [ $? -ne 0 ]; then
                common_logger -e "Failed to backup old hash"
                return 1
            fi
            common_logger -d "Old admin password hash backed up to $backup"

            HASH=$(htpasswd -bnBC 12 "" "Admin12345678" | cut -d ':' -f2- | tr -d '\n')
            if [ -z "$HASH" ]; then
                common_logger -e "Failed to generate bcrypt hash"
                return 1
            fi

            sed -ri "/^admin:/,/^[^ ]/ s|(^[[:space:]]*hash: ).*|\1$HASH|" "$file"
            common_logger -d "Admin password hash updated in $file"
            echo "New HASH: $HASH"

            passwords_runSecurityAdmin
            systemctl restart wazuh-indexer wazuh-manager.service wazuh-dashboard.service

            ;;

        restore)
            if [ ! -f "$backup" ]; then
                common_logger -e "Backup file $backup not found!"
                return 1
            fi

            OLD_HASH=$(head -n 1 "$backup" | tr -d '\n')
            if [ -z "$OLD_HASH" ]; then
                common_logger -e "Old hash in $backup is empty!"
                return 1
            fi

            sed -ri "/^admin:/,/^[^ ]/ s|(^[[:space:]]*hash: ).*|\1$OLD_HASH|" "$file"
            common_logger -d "Admin password hash restored from $backup"

            passwords_runSecurityAdmin
            systemctl restart wazuh-indexer wazuh-manager.service wazuh-dashboard.service

            ;;

        *)
            common_logger -e "Invalid option: $1"
            echo "Usage: source $0 [set|restore]"
            return 1
            ;;
    esac

    echo "Done."
else
    main "$@"
fi
